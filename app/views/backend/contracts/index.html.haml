-content_for :title, _("List of Contracts")
#orders.innercontent

  .top
    %h1= yield :title
  
  %section
    .inlinetabs
      - if %w(submitted_or_approved_or_rejected pending approved rejected).include? params[:filter]
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "submitted_or_approved_or_rejected", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter].blank? or params[:filter] == "submitted_or_approved_or_rejected"}" do
          %span.text
            = _("All")
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "pending", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter] == 'pending'}" do
          %span.text
            = _("Pending")
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "approved", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter] == 'approved'}" do
          %span.text
            = _("Approved")
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "rejected", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter] == 'rejected'}" do
          %span.text
            = _("Rejected")
      - elsif %w(signed_or_closed signed closed).include? params[:filter]
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "signed_or_closed", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter].blank? or params[:filter] == "signed_or_closed"}" do
          %span.text
            = _("All")
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "signed", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter] == 'signed'}" do
          %span.text
            = _("Open")
        = link_to backend_inventory_pool_contracts_path(current_inventory_pool, :filter => "closed", :year => params[:year], :month => params[:month], :query => params[:query]), :class => "tab#{' active' if params[:filter] == 'closed'}" do
          %span.text
            = _("Closed")
            
    .list
      %ul.navigation.line
        .container
          %li.search
            = form_tag("", :method => :get, :autocomplete => :off) do
              %input{:type => "text", :name => "query", :value => "#{params[:query]}",:placeholder => _("Search..."), :class => "clearable"}
              %input{:type => "hidden", :name => "year", :value => params[:year]}
              %input{:type => "hidden", :name => "month", :value => params[:month]}
              %input{:type => "hidden", :name => "filter", :value => params[:filter]}
              = image_tag "loading.gif", :class => "loading"
              -unless params[:query].blank?
                %strong
                  = _("found %i") % @contracts.total_entries
              = _("in")
              %strong
                = @total_entries
              = _("entries%s") % "."
            = image_tag "loading.gif", :class => "loading"
          %li.historical_search
        - if @contracts.blank?
          %ul.line
            %li.name
              %strong
                = _("No entry found")
                - unless params[:query].blank?
                  = _("for '%s'") % params[:query]
  
  - unless @contracts.blank?
    .pagination_container

:javascript
  $(document).ready(function(){
    $('section .list').append($.tmpl("tmpl/line", #{json_for(@contracts, { :preset => :contract_minimal })}));
    
    // setup ListSearch
    ListSearch.setup();
    
    // setup ListPagination
    ListPagination.current_page = #{params[:page].blank? ? 0 : params[:page]};
    ListPagination.per_page = #{PER_PAGE};
    ListPagination.total_entries = #{@contracts.total_entries};
    ListPagination.next_text = "#{_('Next')}";
    ListPagination.previous_text = "#{_('Previous')}";
    ListPagination.setup();
    
    // setup HistoricalSearch
    HistoricalSearch.available_months = #{@available_months.to_json};
    HistoricalSearch.available_years = #{@available_years.to_json};
    HistoricalSearch.selected_year = #{params[:year].blank? ? "undefined" : params[:year]};
    HistoricalSearch.selected_month = #{params[:month].blank? ? "undefined" : params[:month]};
    HistoricalSearch.setup();
  });
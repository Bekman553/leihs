#current-order-basket.margin-left-xxs
  .row
    %ul
      %li
        .navigation-tab-item.margin-right-xxs.padding-horizontal-m.float-left.active
          %i.icon-shopping-cart
          %span.margin-top-s
            = _("Order")
          %span#timeout-countdown.hidden
            #timeout-countdown-refresh.button.white.micro.font-size-s.margin-left-s.negative-margin-right-s.negative-top-xxs
              #timeout-countdown-time

  .row.content-wrapper.straight-top-left.padding-top-xs

    #current-order-lines
      - if unsubmitted_contracts.flat_map(&:lines).empty?
        .padding-horizontal-s.padding-bottom-s.padding-top-xxs.margin-top-xxs
          .emboss.padding-inset-xs
            %p.paragraph-s
              %strong= _("Nothing selected")
      - else
        - Hash[unsubmitted_contracts.flat_map(&:lines).group_by{|l| l.model }.sort].each_pair do |model, lines|
          .row.line.small{:title => model}
            .line-col.col1of1
              %span.text-ellipsis.width-s-alt.block= "#{lines.sum(&:quantity)}x #{model}"

    #order-overview-button.padding-inset-xxs{:class => unsubmitted_contracts.flat_map(&:lines).empty? ? "hidden" : ""}
      .row.padding-inset-s
        %a.button.green.min-width-full{href: borrow_current_order_path }= _("Complete order")

:coffeescript

  for contract_json in #{unsubmitted_contracts.to_json}
    App.Contract.records[contract_json.id] = new App.Contract contract_json
    App.Contract.currents.push App.Contract.records[contract_json.id]

  for contract_line in #{unsubmitted_contracts.flat_map(&:lines).to_json}
    App.ContractLine.records[contract_line.id] = new App.ContractLine contract_line

  for model in #{unsubmitted_contracts.flat_map(&:lines).map(&:model).to_json}
    App.Model.records[model.id] = new App.Model model

  jQuery =>
    new App.Borrow.CurrentOrderBasketController
      el: $("#current-order-basket")